#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Baker_Grillers_Group_Project_Part_I
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BGSportsStatsDB")]
	public partial class BGSportsStatsDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCsgoPlayer(CsgoPlayer instance);
    partial void UpdateCsgoPlayer(CsgoPlayer instance);
    partial void DeleteCsgoPlayer(CsgoPlayer instance);
    partial void InsertNflTeamSeasonStat(NflTeamSeasonStat instance);
    partial void UpdateNflTeamSeasonStat(NflTeamSeasonStat instance);
    partial void DeleteNflTeamSeasonStat(NflTeamSeasonStat instance);
    partial void InsertCsgoPlayerStat(CsgoPlayerStat instance);
    partial void UpdateCsgoPlayerStat(CsgoPlayerStat instance);
    partial void DeleteCsgoPlayerStat(CsgoPlayerStat instance);
    partial void InsertCsgoPlayerTeam(CsgoPlayerTeam instance);
    partial void UpdateCsgoPlayerTeam(CsgoPlayerTeam instance);
    partial void DeleteCsgoPlayerTeam(CsgoPlayerTeam instance);
    partial void InsertCsgoTeam(CsgoTeam instance);
    partial void UpdateCsgoTeam(CsgoTeam instance);
    partial void DeleteCsgoTeam(CsgoTeam instance);
    partial void InsertCsgoTeamStat(CsgoTeamStat instance);
    partial void UpdateCsgoTeamStat(CsgoTeamStat instance);
    partial void DeleteCsgoTeamStat(CsgoTeamStat instance);
    partial void InsertNbaPlayer(NbaPlayer instance);
    partial void UpdateNbaPlayer(NbaPlayer instance);
    partial void DeleteNbaPlayer(NbaPlayer instance);
    partial void InsertNbaPlayerCareerStat(NbaPlayerCareerStat instance);
    partial void UpdateNbaPlayerCareerStat(NbaPlayerCareerStat instance);
    partial void DeleteNbaPlayerCareerStat(NbaPlayerCareerStat instance);
    partial void InsertNbaTeam(NbaTeam instance);
    partial void UpdateNbaTeam(NbaTeam instance);
    partial void DeleteNbaTeam(NbaTeam instance);
    partial void InsertNbaTeamSeasonStat(NbaTeamSeasonStat instance);
    partial void UpdateNbaTeamSeasonStat(NbaTeamSeasonStat instance);
    partial void DeleteNbaTeamSeasonStat(NbaTeamSeasonStat instance);
    partial void InsertNflPlayer(NflPlayer instance);
    partial void UpdateNflPlayer(NflPlayer instance);
    partial void DeleteNflPlayer(NflPlayer instance);
    partial void InsertNflPlayerCareerFumbleStat(NflPlayerCareerFumbleStat instance);
    partial void UpdateNflPlayerCareerFumbleStat(NflPlayerCareerFumbleStat instance);
    partial void DeleteNflPlayerCareerFumbleStat(NflPlayerCareerFumbleStat instance);
    partial void InsertNflPlayerCareerKickStat(NflPlayerCareerKickStat instance);
    partial void UpdateNflPlayerCareerKickStat(NflPlayerCareerKickStat instance);
    partial void DeleteNflPlayerCareerKickStat(NflPlayerCareerKickStat instance);
    partial void InsertNflPlayerCareerPassStat(NflPlayerCareerPassStat instance);
    partial void UpdateNflPlayerCareerPassStat(NflPlayerCareerPassStat instance);
    partial void DeleteNflPlayerCareerPassStat(NflPlayerCareerPassStat instance);
    partial void InsertNflPlayerCareerReceiveStat(NflPlayerCareerReceiveStat instance);
    partial void UpdateNflPlayerCareerReceiveStat(NflPlayerCareerReceiveStat instance);
    partial void DeleteNflPlayerCareerReceiveStat(NflPlayerCareerReceiveStat instance);
    partial void InsertNflPlayerCareerRushStat(NflPlayerCareerRushStat instance);
    partial void UpdateNflPlayerCareerRushStat(NflPlayerCareerRushStat instance);
    partial void DeleteNflPlayerCareerRushStat(NflPlayerCareerRushStat instance);
    partial void InsertNflPlayerCareerSackStat(NflPlayerCareerSackStat instance);
    partial void UpdateNflPlayerCareerSackStat(NflPlayerCareerSackStat instance);
    partial void DeleteNflPlayerCareerSackStat(NflPlayerCareerSackStat instance);
    partial void InsertNflTeam(NflTeam instance);
    partial void UpdateNflTeam(NflTeam instance);
    partial void DeleteNflTeam(NflTeam instance);
    #endregion
		
		public BGSportsStatsDBDataContext() : 
				base(global::Baker_Grillers_Group_Project_Part_I.Properties.Settings.Default.BGSportsStatsDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BGSportsStatsDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BGSportsStatsDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BGSportsStatsDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BGSportsStatsDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CsgoPlayer> CsgoPlayers
		{
			get
			{
				return this.GetTable<CsgoPlayer>();
			}
		}
		
		public System.Data.Linq.Table<NflTeamSeasonStat> NflTeamSeasonStats
		{
			get
			{
				return this.GetTable<NflTeamSeasonStat>();
			}
		}
		
		public System.Data.Linq.Table<CsgoPlayerStat> CsgoPlayerStats
		{
			get
			{
				return this.GetTable<CsgoPlayerStat>();
			}
		}
		
		public System.Data.Linq.Table<CsgoPlayerTeam> CsgoPlayerTeams
		{
			get
			{
				return this.GetTable<CsgoPlayerTeam>();
			}
		}
		
		public System.Data.Linq.Table<CsgoTeam> CsgoTeams
		{
			get
			{
				return this.GetTable<CsgoTeam>();
			}
		}
		
		public System.Data.Linq.Table<CsgoTeamStat> CsgoTeamStats
		{
			get
			{
				return this.GetTable<CsgoTeamStat>();
			}
		}
		
		public System.Data.Linq.Table<NbaPlayer> NbaPlayers
		{
			get
			{
				return this.GetTable<NbaPlayer>();
			}
		}
		
		public System.Data.Linq.Table<NbaPlayerCareerStat> NbaPlayerCareerStats
		{
			get
			{
				return this.GetTable<NbaPlayerCareerStat>();
			}
		}
		
		public System.Data.Linq.Table<NbaTeam> NbaTeams
		{
			get
			{
				return this.GetTable<NbaTeam>();
			}
		}
		
		public System.Data.Linq.Table<NbaTeamSeasonStat> NbaTeamSeasonStats
		{
			get
			{
				return this.GetTable<NbaTeamSeasonStat>();
			}
		}
		
		public System.Data.Linq.Table<NflPlayer> NflPlayers
		{
			get
			{
				return this.GetTable<NflPlayer>();
			}
		}
		
		public System.Data.Linq.Table<NflPlayerCareerFumbleStat> NflPlayerCareerFumbleStats
		{
			get
			{
				return this.GetTable<NflPlayerCareerFumbleStat>();
			}
		}
		
		public System.Data.Linq.Table<NflPlayerCareerKickStat> NflPlayerCareerKickStats
		{
			get
			{
				return this.GetTable<NflPlayerCareerKickStat>();
			}
		}
		
		public System.Data.Linq.Table<NflPlayerCareerPassStat> NflPlayerCareerPassStats
		{
			get
			{
				return this.GetTable<NflPlayerCareerPassStat>();
			}
		}
		
		public System.Data.Linq.Table<NflPlayerCareerReceiveStat> NflPlayerCareerReceiveStats
		{
			get
			{
				return this.GetTable<NflPlayerCareerReceiveStat>();
			}
		}
		
		public System.Data.Linq.Table<NflPlayerCareerRushStat> NflPlayerCareerRushStats
		{
			get
			{
				return this.GetTable<NflPlayerCareerRushStat>();
			}
		}
		
		public System.Data.Linq.Table<NflPlayerCareerSackStat> NflPlayerCareerSackStats
		{
			get
			{
				return this.GetTable<NflPlayerCareerSackStat>();
			}
		}
		
		public System.Data.Linq.Table<NflTeam> NflTeams
		{
			get
			{
				return this.GetTable<NflTeam>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CsgoPlayer")]
	public partial class CsgoPlayer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private string _PlayerName;
		
		private EntityRef<CsgoPlayerStat> _CsgoPlayerStat;
		
		private EntitySet<CsgoPlayerTeam> _CsgoPlayerTeams;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnPlayerNameChanging(string value);
    partial void OnPlayerNameChanged();
    #endregion
		
		public CsgoPlayer()
		{
			this._CsgoPlayerStat = default(EntityRef<CsgoPlayerStat>);
			this._CsgoPlayerTeams = new EntitySet<CsgoPlayerTeam>(new Action<CsgoPlayerTeam>(this.attach_CsgoPlayerTeams), new Action<CsgoPlayerTeam>(this.detach_CsgoPlayerTeams));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PlayerName
		{
			get
			{
				return this._PlayerName;
			}
			set
			{
				if ((this._PlayerName != value))
				{
					this.OnPlayerNameChanging(value);
					this.SendPropertyChanging();
					this._PlayerName = value;
					this.SendPropertyChanged("PlayerName");
					this.OnPlayerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CsgoPlayer_CsgoPlayerStat", Storage="_CsgoPlayerStat", ThisKey="PlayerID", OtherKey="PlayerID", IsUnique=true, IsForeignKey=false)]
		public CsgoPlayerStat CsgoPlayerStat
		{
			get
			{
				return this._CsgoPlayerStat.Entity;
			}
			set
			{
				CsgoPlayerStat previousValue = this._CsgoPlayerStat.Entity;
				if (((previousValue != value) 
							|| (this._CsgoPlayerStat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CsgoPlayerStat.Entity = null;
						previousValue.CsgoPlayer = null;
					}
					this._CsgoPlayerStat.Entity = value;
					if ((value != null))
					{
						value.CsgoPlayer = this;
					}
					this.SendPropertyChanged("CsgoPlayerStat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CsgoPlayer_CsgoPlayerTeam", Storage="_CsgoPlayerTeams", ThisKey="PlayerID", OtherKey="PlayerID")]
		public EntitySet<CsgoPlayerTeam> CsgoPlayerTeams
		{
			get
			{
				return this._CsgoPlayerTeams;
			}
			set
			{
				this._CsgoPlayerTeams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CsgoPlayerTeams(CsgoPlayerTeam entity)
		{
			this.SendPropertyChanging();
			entity.CsgoPlayer = this;
		}
		
		private void detach_CsgoPlayerTeams(CsgoPlayerTeam entity)
		{
			this.SendPropertyChanging();
			entity.CsgoPlayer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NflTeamSeasonStat")]
	public partial class NflTeamSeasonStat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamID;
		
		private int _SeasonYear;
		
		private int _RushingTD;
		
		private int _ReceivingTD;
		
		private int _TotalTD;
		
		private int _TwoPoints;
		
		private int _Wins;
		
		private int _Losses;
		
		private int _Ties;
		
		private System.Nullable<int> _FieldGoalsMade;
		
		private System.Nullable<int> _FieldGoalAttempts;
		
		private System.Nullable<int> _ExtraPointsMade;
		
		private System.Nullable<int> _RushYards;
		
		private System.Nullable<int> _PassingYards;
		
		private System.Nullable<int> _Interceptions;
		
		private EntityRef<NflTeam> _NflTeam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnSeasonYearChanging(int value);
    partial void OnSeasonYearChanged();
    partial void OnRushingTDChanging(int value);
    partial void OnRushingTDChanged();
    partial void OnReceivingTDChanging(int value);
    partial void OnReceivingTDChanged();
    partial void OnTotalTDChanging(int value);
    partial void OnTotalTDChanged();
    partial void OnTwoPointsChanging(int value);
    partial void OnTwoPointsChanged();
    partial void OnWinsChanging(int value);
    partial void OnWinsChanged();
    partial void OnLossesChanging(int value);
    partial void OnLossesChanged();
    partial void OnTiesChanging(int value);
    partial void OnTiesChanged();
    partial void OnFieldGoalsMadeChanging(System.Nullable<int> value);
    partial void OnFieldGoalsMadeChanged();
    partial void OnFieldGoalAttemptsChanging(System.Nullable<int> value);
    partial void OnFieldGoalAttemptsChanged();
    partial void OnExtraPointsMadeChanging(System.Nullable<int> value);
    partial void OnExtraPointsMadeChanged();
    partial void OnRushYardsChanging(System.Nullable<int> value);
    partial void OnRushYardsChanged();
    partial void OnPassingYardsChanging(System.Nullable<int> value);
    partial void OnPassingYardsChanged();
    partial void OnInterceptionsChanging(System.Nullable<int> value);
    partial void OnInterceptionsChanged();
    #endregion
		
		public NflTeamSeasonStat()
		{
			this._NflTeam = default(EntityRef<NflTeam>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._NflTeam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonYear", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SeasonYear
		{
			get
			{
				return this._SeasonYear;
			}
			set
			{
				if ((this._SeasonYear != value))
				{
					this.OnSeasonYearChanging(value);
					this.SendPropertyChanging();
					this._SeasonYear = value;
					this.SendPropertyChanged("SeasonYear");
					this.OnSeasonYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RushingTD", DbType="Int NOT NULL")]
		public int RushingTD
		{
			get
			{
				return this._RushingTD;
			}
			set
			{
				if ((this._RushingTD != value))
				{
					this.OnRushingTDChanging(value);
					this.SendPropertyChanging();
					this._RushingTD = value;
					this.SendPropertyChanged("RushingTD");
					this.OnRushingTDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceivingTD", DbType="Int NOT NULL")]
		public int ReceivingTD
		{
			get
			{
				return this._ReceivingTD;
			}
			set
			{
				if ((this._ReceivingTD != value))
				{
					this.OnReceivingTDChanging(value);
					this.SendPropertyChanging();
					this._ReceivingTD = value;
					this.SendPropertyChanged("ReceivingTD");
					this.OnReceivingTDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalTD", DbType="Int NOT NULL")]
		public int TotalTD
		{
			get
			{
				return this._TotalTD;
			}
			set
			{
				if ((this._TotalTD != value))
				{
					this.OnTotalTDChanging(value);
					this.SendPropertyChanging();
					this._TotalTD = value;
					this.SendPropertyChanged("TotalTD");
					this.OnTotalTDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoPoints", DbType="Int NOT NULL")]
		public int TwoPoints
		{
			get
			{
				return this._TwoPoints;
			}
			set
			{
				if ((this._TwoPoints != value))
				{
					this.OnTwoPointsChanging(value);
					this.SendPropertyChanging();
					this._TwoPoints = value;
					this.SendPropertyChanged("TwoPoints");
					this.OnTwoPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wins", DbType="Int NOT NULL")]
		public int Wins
		{
			get
			{
				return this._Wins;
			}
			set
			{
				if ((this._Wins != value))
				{
					this.OnWinsChanging(value);
					this.SendPropertyChanging();
					this._Wins = value;
					this.SendPropertyChanged("Wins");
					this.OnWinsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Losses", DbType="Int NOT NULL")]
		public int Losses
		{
			get
			{
				return this._Losses;
			}
			set
			{
				if ((this._Losses != value))
				{
					this.OnLossesChanging(value);
					this.SendPropertyChanging();
					this._Losses = value;
					this.SendPropertyChanged("Losses");
					this.OnLossesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ties", DbType="Int NOT NULL")]
		public int Ties
		{
			get
			{
				return this._Ties;
			}
			set
			{
				if ((this._Ties != value))
				{
					this.OnTiesChanging(value);
					this.SendPropertyChanging();
					this._Ties = value;
					this.SendPropertyChanged("Ties");
					this.OnTiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldGoalsMade", DbType="Int")]
		public System.Nullable<int> FieldGoalsMade
		{
			get
			{
				return this._FieldGoalsMade;
			}
			set
			{
				if ((this._FieldGoalsMade != value))
				{
					this.OnFieldGoalsMadeChanging(value);
					this.SendPropertyChanging();
					this._FieldGoalsMade = value;
					this.SendPropertyChanged("FieldGoalsMade");
					this.OnFieldGoalsMadeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldGoalAttempts", DbType="Int")]
		public System.Nullable<int> FieldGoalAttempts
		{
			get
			{
				return this._FieldGoalAttempts;
			}
			set
			{
				if ((this._FieldGoalAttempts != value))
				{
					this.OnFieldGoalAttemptsChanging(value);
					this.SendPropertyChanging();
					this._FieldGoalAttempts = value;
					this.SendPropertyChanged("FieldGoalAttempts");
					this.OnFieldGoalAttemptsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtraPointsMade", DbType="Int")]
		public System.Nullable<int> ExtraPointsMade
		{
			get
			{
				return this._ExtraPointsMade;
			}
			set
			{
				if ((this._ExtraPointsMade != value))
				{
					this.OnExtraPointsMadeChanging(value);
					this.SendPropertyChanging();
					this._ExtraPointsMade = value;
					this.SendPropertyChanged("ExtraPointsMade");
					this.OnExtraPointsMadeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RushYards", DbType="Int")]
		public System.Nullable<int> RushYards
		{
			get
			{
				return this._RushYards;
			}
			set
			{
				if ((this._RushYards != value))
				{
					this.OnRushYardsChanging(value);
					this.SendPropertyChanging();
					this._RushYards = value;
					this.SendPropertyChanged("RushYards");
					this.OnRushYardsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassingYards", DbType="Int")]
		public System.Nullable<int> PassingYards
		{
			get
			{
				return this._PassingYards;
			}
			set
			{
				if ((this._PassingYards != value))
				{
					this.OnPassingYardsChanging(value);
					this.SendPropertyChanging();
					this._PassingYards = value;
					this.SendPropertyChanged("PassingYards");
					this.OnPassingYardsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Interceptions", DbType="Int")]
		public System.Nullable<int> Interceptions
		{
			get
			{
				return this._Interceptions;
			}
			set
			{
				if ((this._Interceptions != value))
				{
					this.OnInterceptionsChanging(value);
					this.SendPropertyChanging();
					this._Interceptions = value;
					this.SendPropertyChanged("Interceptions");
					this.OnInterceptionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NflTeam_NflTeamSeasonStat", Storage="_NflTeam", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
		public NflTeam NflTeam
		{
			get
			{
				return this._NflTeam.Entity;
			}
			set
			{
				NflTeam previousValue = this._NflTeam.Entity;
				if (((previousValue != value) 
							|| (this._NflTeam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NflTeam.Entity = null;
						previousValue.NflTeamSeasonStats.Remove(this);
					}
					this._NflTeam.Entity = value;
					if ((value != null))
					{
						value.NflTeamSeasonStats.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("NflTeam");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CsgoPlayerStat")]
	public partial class CsgoPlayerStat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private int _TotalMaps;
		
		private int _TotalRounds;
		
		private int _KdDiff;
		
		private decimal _Kd;
		
		private decimal _Rating;
		
		private EntityRef<CsgoPlayer> _CsgoPlayer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnTotalMapsChanging(int value);
    partial void OnTotalMapsChanged();
    partial void OnTotalRoundsChanging(int value);
    partial void OnTotalRoundsChanged();
    partial void OnKdDiffChanging(int value);
    partial void OnKdDiffChanged();
    partial void OnKdChanging(decimal value);
    partial void OnKdChanged();
    partial void OnRatingChanging(decimal value);
    partial void OnRatingChanged();
    #endregion
		
		public CsgoPlayerStat()
		{
			this._CsgoPlayer = default(EntityRef<CsgoPlayer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._CsgoPlayer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalMaps", DbType="Int NOT NULL")]
		public int TotalMaps
		{
			get
			{
				return this._TotalMaps;
			}
			set
			{
				if ((this._TotalMaps != value))
				{
					this.OnTotalMapsChanging(value);
					this.SendPropertyChanging();
					this._TotalMaps = value;
					this.SendPropertyChanged("TotalMaps");
					this.OnTotalMapsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalRounds", DbType="Int NOT NULL")]
		public int TotalRounds
		{
			get
			{
				return this._TotalRounds;
			}
			set
			{
				if ((this._TotalRounds != value))
				{
					this.OnTotalRoundsChanging(value);
					this.SendPropertyChanging();
					this._TotalRounds = value;
					this.SendPropertyChanged("TotalRounds");
					this.OnTotalRoundsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KdDiff", DbType="Int NOT NULL")]
		public int KdDiff
		{
			get
			{
				return this._KdDiff;
			}
			set
			{
				if ((this._KdDiff != value))
				{
					this.OnKdDiffChanging(value);
					this.SendPropertyChanging();
					this._KdDiff = value;
					this.SendPropertyChanged("KdDiff");
					this.OnKdDiffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kd", DbType="Decimal(4,2) NOT NULL")]
		public decimal Kd
		{
			get
			{
				return this._Kd;
			}
			set
			{
				if ((this._Kd != value))
				{
					this.OnKdChanging(value);
					this.SendPropertyChanging();
					this._Kd = value;
					this.SendPropertyChanged("Kd");
					this.OnKdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Decimal(4,2) NOT NULL")]
		public decimal Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CsgoPlayer_CsgoPlayerStat", Storage="_CsgoPlayer", ThisKey="PlayerID", OtherKey="PlayerID", IsForeignKey=true)]
		public CsgoPlayer CsgoPlayer
		{
			get
			{
				return this._CsgoPlayer.Entity;
			}
			set
			{
				CsgoPlayer previousValue = this._CsgoPlayer.Entity;
				if (((previousValue != value) 
							|| (this._CsgoPlayer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CsgoPlayer.Entity = null;
						previousValue.CsgoPlayerStat = null;
					}
					this._CsgoPlayer.Entity = value;
					if ((value != null))
					{
						value.CsgoPlayerStat = this;
						this._PlayerID = value.PlayerID;
					}
					else
					{
						this._PlayerID = default(int);
					}
					this.SendPropertyChanged("CsgoPlayer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CsgoPlayerTeam")]
	public partial class CsgoPlayerTeam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private int _TeamID;
		
		private EntityRef<CsgoPlayer> _CsgoPlayer;
		
		private EntityRef<CsgoTeam> _CsgoTeam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    #endregion
		
		public CsgoPlayerTeam()
		{
			this._CsgoPlayer = default(EntityRef<CsgoPlayer>);
			this._CsgoTeam = default(EntityRef<CsgoTeam>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._CsgoPlayer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._CsgoTeam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CsgoPlayer_CsgoPlayerTeam", Storage="_CsgoPlayer", ThisKey="PlayerID", OtherKey="PlayerID", IsForeignKey=true)]
		public CsgoPlayer CsgoPlayer
		{
			get
			{
				return this._CsgoPlayer.Entity;
			}
			set
			{
				CsgoPlayer previousValue = this._CsgoPlayer.Entity;
				if (((previousValue != value) 
							|| (this._CsgoPlayer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CsgoPlayer.Entity = null;
						previousValue.CsgoPlayerTeams.Remove(this);
					}
					this._CsgoPlayer.Entity = value;
					if ((value != null))
					{
						value.CsgoPlayerTeams.Add(this);
						this._PlayerID = value.PlayerID;
					}
					else
					{
						this._PlayerID = default(int);
					}
					this.SendPropertyChanged("CsgoPlayer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CsgoTeam_CsgoPlayerTeam", Storage="_CsgoTeam", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
		public CsgoTeam CsgoTeam
		{
			get
			{
				return this._CsgoTeam.Entity;
			}
			set
			{
				CsgoTeam previousValue = this._CsgoTeam.Entity;
				if (((previousValue != value) 
							|| (this._CsgoTeam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CsgoTeam.Entity = null;
						previousValue.CsgoPlayerTeams.Remove(this);
					}
					this._CsgoTeam.Entity = value;
					if ((value != null))
					{
						value.CsgoPlayerTeams.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("CsgoTeam");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CsgoTeam")]
	public partial class CsgoTeam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamID;
		
		private string _TeamName;
		
		private EntitySet<CsgoPlayerTeam> _CsgoPlayerTeams;
		
		private EntityRef<CsgoTeamStat> _CsgoTeamStat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnTeamNameChanging(string value);
    partial void OnTeamNameChanged();
    #endregion
		
		public CsgoTeam()
		{
			this._CsgoPlayerTeams = new EntitySet<CsgoPlayerTeam>(new Action<CsgoPlayerTeam>(this.attach_CsgoPlayerTeams), new Action<CsgoPlayerTeam>(this.detach_CsgoPlayerTeams));
			this._CsgoTeamStat = default(EntityRef<CsgoTeamStat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TeamName
		{
			get
			{
				return this._TeamName;
			}
			set
			{
				if ((this._TeamName != value))
				{
					this.OnTeamNameChanging(value);
					this.SendPropertyChanging();
					this._TeamName = value;
					this.SendPropertyChanged("TeamName");
					this.OnTeamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CsgoTeam_CsgoPlayerTeam", Storage="_CsgoPlayerTeams", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<CsgoPlayerTeam> CsgoPlayerTeams
		{
			get
			{
				return this._CsgoPlayerTeams;
			}
			set
			{
				this._CsgoPlayerTeams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CsgoTeam_CsgoTeamStat", Storage="_CsgoTeamStat", ThisKey="TeamID", OtherKey="TeamID", IsUnique=true, IsForeignKey=false)]
		public CsgoTeamStat CsgoTeamStat
		{
			get
			{
				return this._CsgoTeamStat.Entity;
			}
			set
			{
				CsgoTeamStat previousValue = this._CsgoTeamStat.Entity;
				if (((previousValue != value) 
							|| (this._CsgoTeamStat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CsgoTeamStat.Entity = null;
						previousValue.CsgoTeam = null;
					}
					this._CsgoTeamStat.Entity = value;
					if ((value != null))
					{
						value.CsgoTeam = this;
					}
					this.SendPropertyChanged("CsgoTeamStat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CsgoPlayerTeams(CsgoPlayerTeam entity)
		{
			this.SendPropertyChanging();
			entity.CsgoTeam = this;
		}
		
		private void detach_CsgoPlayerTeams(CsgoPlayerTeam entity)
		{
			this.SendPropertyChanging();
			entity.CsgoTeam = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CsgoTeamStat")]
	public partial class CsgoTeamStat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamID;
		
		private int _TotalMaps;
		
		private int _KdDiff;
		
		private decimal _Kd;
		
		private decimal _Rating;
		
		private EntityRef<CsgoTeam> _CsgoTeam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnTotalMapsChanging(int value);
    partial void OnTotalMapsChanged();
    partial void OnKdDiffChanging(int value);
    partial void OnKdDiffChanged();
    partial void OnKdChanging(decimal value);
    partial void OnKdChanged();
    partial void OnRatingChanging(decimal value);
    partial void OnRatingChanged();
    #endregion
		
		public CsgoTeamStat()
		{
			this._CsgoTeam = default(EntityRef<CsgoTeam>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._CsgoTeam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalMaps", DbType="Int NOT NULL")]
		public int TotalMaps
		{
			get
			{
				return this._TotalMaps;
			}
			set
			{
				if ((this._TotalMaps != value))
				{
					this.OnTotalMapsChanging(value);
					this.SendPropertyChanging();
					this._TotalMaps = value;
					this.SendPropertyChanged("TotalMaps");
					this.OnTotalMapsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KdDiff", DbType="Int NOT NULL")]
		public int KdDiff
		{
			get
			{
				return this._KdDiff;
			}
			set
			{
				if ((this._KdDiff != value))
				{
					this.OnKdDiffChanging(value);
					this.SendPropertyChanging();
					this._KdDiff = value;
					this.SendPropertyChanged("KdDiff");
					this.OnKdDiffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kd", DbType="Decimal(4,2) NOT NULL")]
		public decimal Kd
		{
			get
			{
				return this._Kd;
			}
			set
			{
				if ((this._Kd != value))
				{
					this.OnKdChanging(value);
					this.SendPropertyChanging();
					this._Kd = value;
					this.SendPropertyChanged("Kd");
					this.OnKdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Decimal(4,2) NOT NULL")]
		public decimal Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CsgoTeam_CsgoTeamStat", Storage="_CsgoTeam", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
		public CsgoTeam CsgoTeam
		{
			get
			{
				return this._CsgoTeam.Entity;
			}
			set
			{
				CsgoTeam previousValue = this._CsgoTeam.Entity;
				if (((previousValue != value) 
							|| (this._CsgoTeam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CsgoTeam.Entity = null;
						previousValue.CsgoTeamStat = null;
					}
					this._CsgoTeam.Entity = value;
					if ((value != null))
					{
						value.CsgoTeamStat = this;
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("CsgoTeam");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NbaPlayer")]
	public partial class NbaPlayer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private System.Nullable<int> _TeamID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<bool> _IsActive;
		
		private EntityRef<NbaPlayerCareerStat> _NbaPlayerCareerStat;
		
		private EntityRef<NbaTeam> _NbaTeam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnTeamIDChanging(System.Nullable<int> value);
    partial void OnTeamIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public NbaPlayer()
		{
			this._NbaPlayerCareerStat = default(EntityRef<NbaPlayerCareerStat>);
			this._NbaTeam = default(EntityRef<NbaTeam>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int")]
		public System.Nullable<int> TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._NbaTeam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NbaPlayer_NbaPlayerCareerStat", Storage="_NbaPlayerCareerStat", ThisKey="PlayerID", OtherKey="PlayerID", IsUnique=true, IsForeignKey=false)]
		public NbaPlayerCareerStat NbaPlayerCareerStat
		{
			get
			{
				return this._NbaPlayerCareerStat.Entity;
			}
			set
			{
				NbaPlayerCareerStat previousValue = this._NbaPlayerCareerStat.Entity;
				if (((previousValue != value) 
							|| (this._NbaPlayerCareerStat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NbaPlayerCareerStat.Entity = null;
						previousValue.NbaPlayer = null;
					}
					this._NbaPlayerCareerStat.Entity = value;
					if ((value != null))
					{
						value.NbaPlayer = this;
					}
					this.SendPropertyChanged("NbaPlayerCareerStat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NbaTeam_NbaPlayer", Storage="_NbaTeam", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
		public NbaTeam NbaTeam
		{
			get
			{
				return this._NbaTeam.Entity;
			}
			set
			{
				NbaTeam previousValue = this._NbaTeam.Entity;
				if (((previousValue != value) 
							|| (this._NbaTeam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NbaTeam.Entity = null;
						previousValue.NbaPlayers.Remove(this);
					}
					this._NbaTeam.Entity = value;
					if ((value != null))
					{
						value.NbaPlayers.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(Nullable<int>);
					}
					this.SendPropertyChanged("NbaTeam");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NbaPlayerCareerStat")]
	public partial class NbaPlayerCareerStat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private System.Nullable<int> _FieldGoals;
		
		private System.Nullable<int> _FieldGoalAttempts;
		
		private System.Nullable<int> _ThreePoints;
		
		private System.Nullable<int> _ThreePointAttempts;
		
		private System.Nullable<int> _TwoPoints;
		
		private System.Nullable<int> _TwoPointsAttempts;
		
		private System.Nullable<int> _FreeThrows;
		
		private System.Nullable<int> _FreeThrowAttempts;
		
		private System.Nullable<int> _OffensiveRebounds;
		
		private System.Nullable<int> _DefensiveRebounds;
		
		private System.Nullable<int> _Assists;
		
		private System.Nullable<int> _Steals;
		
		private System.Nullable<int> _Blocks;
		
		private System.Nullable<int> _Turnovers;
		
		private System.Nullable<int> _PersonalFouls;
		
		private System.Nullable<int> _TotalPoints;
		
		private EntityRef<NbaPlayer> _NbaPlayer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnFieldGoalsChanging(System.Nullable<int> value);
    partial void OnFieldGoalsChanged();
    partial void OnFieldGoalAttemptsChanging(System.Nullable<int> value);
    partial void OnFieldGoalAttemptsChanged();
    partial void OnThreePointsChanging(System.Nullable<int> value);
    partial void OnThreePointsChanged();
    partial void OnThreePointAttemptsChanging(System.Nullable<int> value);
    partial void OnThreePointAttemptsChanged();
    partial void OnTwoPointsChanging(System.Nullable<int> value);
    partial void OnTwoPointsChanged();
    partial void OnTwoPointsAttemptsChanging(System.Nullable<int> value);
    partial void OnTwoPointsAttemptsChanged();
    partial void OnFreeThrowsChanging(System.Nullable<int> value);
    partial void OnFreeThrowsChanged();
    partial void OnFreeThrowAttemptsChanging(System.Nullable<int> value);
    partial void OnFreeThrowAttemptsChanged();
    partial void OnOffensiveReboundsChanging(System.Nullable<int> value);
    partial void OnOffensiveReboundsChanged();
    partial void OnDefensiveReboundsChanging(System.Nullable<int> value);
    partial void OnDefensiveReboundsChanged();
    partial void OnAssistsChanging(System.Nullable<int> value);
    partial void OnAssistsChanged();
    partial void OnStealsChanging(System.Nullable<int> value);
    partial void OnStealsChanged();
    partial void OnBlocksChanging(System.Nullable<int> value);
    partial void OnBlocksChanged();
    partial void OnTurnoversChanging(System.Nullable<int> value);
    partial void OnTurnoversChanged();
    partial void OnPersonalFoulsChanging(System.Nullable<int> value);
    partial void OnPersonalFoulsChanged();
    partial void OnTotalPointsChanging(System.Nullable<int> value);
    partial void OnTotalPointsChanged();
    #endregion
		
		public NbaPlayerCareerStat()
		{
			this._NbaPlayer = default(EntityRef<NbaPlayer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._NbaPlayer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldGoals", DbType="Int")]
		public System.Nullable<int> FieldGoals
		{
			get
			{
				return this._FieldGoals;
			}
			set
			{
				if ((this._FieldGoals != value))
				{
					this.OnFieldGoalsChanging(value);
					this.SendPropertyChanging();
					this._FieldGoals = value;
					this.SendPropertyChanged("FieldGoals");
					this.OnFieldGoalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldGoalAttempts", DbType="Int")]
		public System.Nullable<int> FieldGoalAttempts
		{
			get
			{
				return this._FieldGoalAttempts;
			}
			set
			{
				if ((this._FieldGoalAttempts != value))
				{
					this.OnFieldGoalAttemptsChanging(value);
					this.SendPropertyChanging();
					this._FieldGoalAttempts = value;
					this.SendPropertyChanged("FieldGoalAttempts");
					this.OnFieldGoalAttemptsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreePoints", DbType="Int")]
		public System.Nullable<int> ThreePoints
		{
			get
			{
				return this._ThreePoints;
			}
			set
			{
				if ((this._ThreePoints != value))
				{
					this.OnThreePointsChanging(value);
					this.SendPropertyChanging();
					this._ThreePoints = value;
					this.SendPropertyChanged("ThreePoints");
					this.OnThreePointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreePointAttempts", DbType="Int")]
		public System.Nullable<int> ThreePointAttempts
		{
			get
			{
				return this._ThreePointAttempts;
			}
			set
			{
				if ((this._ThreePointAttempts != value))
				{
					this.OnThreePointAttemptsChanging(value);
					this.SendPropertyChanging();
					this._ThreePointAttempts = value;
					this.SendPropertyChanged("ThreePointAttempts");
					this.OnThreePointAttemptsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoPoints", DbType="Int")]
		public System.Nullable<int> TwoPoints
		{
			get
			{
				return this._TwoPoints;
			}
			set
			{
				if ((this._TwoPoints != value))
				{
					this.OnTwoPointsChanging(value);
					this.SendPropertyChanging();
					this._TwoPoints = value;
					this.SendPropertyChanged("TwoPoints");
					this.OnTwoPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoPointsAttempts", DbType="Int")]
		public System.Nullable<int> TwoPointsAttempts
		{
			get
			{
				return this._TwoPointsAttempts;
			}
			set
			{
				if ((this._TwoPointsAttempts != value))
				{
					this.OnTwoPointsAttemptsChanging(value);
					this.SendPropertyChanging();
					this._TwoPointsAttempts = value;
					this.SendPropertyChanged("TwoPointsAttempts");
					this.OnTwoPointsAttemptsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreeThrows", DbType="Int")]
		public System.Nullable<int> FreeThrows
		{
			get
			{
				return this._FreeThrows;
			}
			set
			{
				if ((this._FreeThrows != value))
				{
					this.OnFreeThrowsChanging(value);
					this.SendPropertyChanging();
					this._FreeThrows = value;
					this.SendPropertyChanged("FreeThrows");
					this.OnFreeThrowsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreeThrowAttempts", DbType="Int")]
		public System.Nullable<int> FreeThrowAttempts
		{
			get
			{
				return this._FreeThrowAttempts;
			}
			set
			{
				if ((this._FreeThrowAttempts != value))
				{
					this.OnFreeThrowAttemptsChanging(value);
					this.SendPropertyChanging();
					this._FreeThrowAttempts = value;
					this.SendPropertyChanged("FreeThrowAttempts");
					this.OnFreeThrowAttemptsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OffensiveRebounds", DbType="Int")]
		public System.Nullable<int> OffensiveRebounds
		{
			get
			{
				return this._OffensiveRebounds;
			}
			set
			{
				if ((this._OffensiveRebounds != value))
				{
					this.OnOffensiveReboundsChanging(value);
					this.SendPropertyChanging();
					this._OffensiveRebounds = value;
					this.SendPropertyChanged("OffensiveRebounds");
					this.OnOffensiveReboundsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefensiveRebounds", DbType="Int")]
		public System.Nullable<int> DefensiveRebounds
		{
			get
			{
				return this._DefensiveRebounds;
			}
			set
			{
				if ((this._DefensiveRebounds != value))
				{
					this.OnDefensiveReboundsChanging(value);
					this.SendPropertyChanging();
					this._DefensiveRebounds = value;
					this.SendPropertyChanged("DefensiveRebounds");
					this.OnDefensiveReboundsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assists", DbType="Int")]
		public System.Nullable<int> Assists
		{
			get
			{
				return this._Assists;
			}
			set
			{
				if ((this._Assists != value))
				{
					this.OnAssistsChanging(value);
					this.SendPropertyChanging();
					this._Assists = value;
					this.SendPropertyChanged("Assists");
					this.OnAssistsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Steals", DbType="Int")]
		public System.Nullable<int> Steals
		{
			get
			{
				return this._Steals;
			}
			set
			{
				if ((this._Steals != value))
				{
					this.OnStealsChanging(value);
					this.SendPropertyChanging();
					this._Steals = value;
					this.SendPropertyChanged("Steals");
					this.OnStealsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Blocks", DbType="Int")]
		public System.Nullable<int> Blocks
		{
			get
			{
				return this._Blocks;
			}
			set
			{
				if ((this._Blocks != value))
				{
					this.OnBlocksChanging(value);
					this.SendPropertyChanging();
					this._Blocks = value;
					this.SendPropertyChanged("Blocks");
					this.OnBlocksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Turnovers", DbType="Int")]
		public System.Nullable<int> Turnovers
		{
			get
			{
				return this._Turnovers;
			}
			set
			{
				if ((this._Turnovers != value))
				{
					this.OnTurnoversChanging(value);
					this.SendPropertyChanging();
					this._Turnovers = value;
					this.SendPropertyChanged("Turnovers");
					this.OnTurnoversChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalFouls", DbType="Int")]
		public System.Nullable<int> PersonalFouls
		{
			get
			{
				return this._PersonalFouls;
			}
			set
			{
				if ((this._PersonalFouls != value))
				{
					this.OnPersonalFoulsChanging(value);
					this.SendPropertyChanging();
					this._PersonalFouls = value;
					this.SendPropertyChanged("PersonalFouls");
					this.OnPersonalFoulsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPoints", DbType="Int")]
		public System.Nullable<int> TotalPoints
		{
			get
			{
				return this._TotalPoints;
			}
			set
			{
				if ((this._TotalPoints != value))
				{
					this.OnTotalPointsChanging(value);
					this.SendPropertyChanging();
					this._TotalPoints = value;
					this.SendPropertyChanged("TotalPoints");
					this.OnTotalPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NbaPlayer_NbaPlayerCareerStat", Storage="_NbaPlayer", ThisKey="PlayerID", OtherKey="PlayerID", IsForeignKey=true)]
		public NbaPlayer NbaPlayer
		{
			get
			{
				return this._NbaPlayer.Entity;
			}
			set
			{
				NbaPlayer previousValue = this._NbaPlayer.Entity;
				if (((previousValue != value) 
							|| (this._NbaPlayer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NbaPlayer.Entity = null;
						previousValue.NbaPlayerCareerStat = null;
					}
					this._NbaPlayer.Entity = value;
					if ((value != null))
					{
						value.NbaPlayerCareerStat = this;
						this._PlayerID = value.PlayerID;
					}
					else
					{
						this._PlayerID = default(int);
					}
					this.SendPropertyChanged("NbaPlayer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NbaTeam")]
	public partial class NbaTeam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamID;
		
		private string _TeamName;
		
		private string _TeamAbreviation;
		
		private EntitySet<NbaPlayer> _NbaPlayers;
		
		private EntitySet<NbaTeamSeasonStat> _NbaTeamSeasonStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnTeamNameChanging(string value);
    partial void OnTeamNameChanged();
    partial void OnTeamAbreviationChanging(string value);
    partial void OnTeamAbreviationChanged();
    #endregion
		
		public NbaTeam()
		{
			this._NbaPlayers = new EntitySet<NbaPlayer>(new Action<NbaPlayer>(this.attach_NbaPlayers), new Action<NbaPlayer>(this.detach_NbaPlayers));
			this._NbaTeamSeasonStats = new EntitySet<NbaTeamSeasonStat>(new Action<NbaTeamSeasonStat>(this.attach_NbaTeamSeasonStats), new Action<NbaTeamSeasonStat>(this.detach_NbaTeamSeasonStats));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamName", DbType="NVarChar(50)")]
		public string TeamName
		{
			get
			{
				return this._TeamName;
			}
			set
			{
				if ((this._TeamName != value))
				{
					this.OnTeamNameChanging(value);
					this.SendPropertyChanging();
					this._TeamName = value;
					this.SendPropertyChanged("TeamName");
					this.OnTeamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamAbreviation", DbType="Char(3)")]
		public string TeamAbreviation
		{
			get
			{
				return this._TeamAbreviation;
			}
			set
			{
				if ((this._TeamAbreviation != value))
				{
					this.OnTeamAbreviationChanging(value);
					this.SendPropertyChanging();
					this._TeamAbreviation = value;
					this.SendPropertyChanged("TeamAbreviation");
					this.OnTeamAbreviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NbaTeam_NbaPlayer", Storage="_NbaPlayers", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<NbaPlayer> NbaPlayers
		{
			get
			{
				return this._NbaPlayers;
			}
			set
			{
				this._NbaPlayers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NbaTeam_NbaTeamSeasonStat", Storage="_NbaTeamSeasonStats", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<NbaTeamSeasonStat> NbaTeamSeasonStats
		{
			get
			{
				return this._NbaTeamSeasonStats;
			}
			set
			{
				this._NbaTeamSeasonStats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NbaPlayers(NbaPlayer entity)
		{
			this.SendPropertyChanging();
			entity.NbaTeam = this;
		}
		
		private void detach_NbaPlayers(NbaPlayer entity)
		{
			this.SendPropertyChanging();
			entity.NbaTeam = null;
		}
		
		private void attach_NbaTeamSeasonStats(NbaTeamSeasonStat entity)
		{
			this.SendPropertyChanging();
			entity.NbaTeam = this;
		}
		
		private void detach_NbaTeamSeasonStats(NbaTeamSeasonStat entity)
		{
			this.SendPropertyChanging();
			entity.NbaTeam = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NbaTeamSeasonStat")]
	public partial class NbaTeamSeasonStat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamID;
		
		private int _SeasonYear;
		
		private System.Nullable<int> _FieldGoals;
		
		private System.Nullable<int> _FieldGoalAttempts;
		
		private System.Nullable<int> _ThreePoints;
		
		private System.Nullable<int> _ThreePointAttempts;
		
		private System.Nullable<int> _TwoPoints;
		
		private System.Nullable<int> _TwoPointAttempts;
		
		private System.Nullable<int> _FreeThrows;
		
		private System.Nullable<int> _FreeThrowAttempts;
		
		private System.Nullable<int> _OffensiveRebounds;
		
		private System.Nullable<int> _DefensiveRebounds;
		
		private System.Nullable<int> _Assists;
		
		private System.Nullable<int> _Steals;
		
		private System.Nullable<int> _Blocks;
		
		private System.Nullable<int> _Turnovers;
		
		private System.Nullable<int> _PersonalFouls;
		
		private System.Nullable<int> _TotalPoints;
		
		private EntityRef<NbaTeam> _NbaTeam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnSeasonYearChanging(int value);
    partial void OnSeasonYearChanged();
    partial void OnFieldGoalsChanging(System.Nullable<int> value);
    partial void OnFieldGoalsChanged();
    partial void OnFieldGoalAttemptsChanging(System.Nullable<int> value);
    partial void OnFieldGoalAttemptsChanged();
    partial void OnThreePointsChanging(System.Nullable<int> value);
    partial void OnThreePointsChanged();
    partial void OnThreePointAttemptsChanging(System.Nullable<int> value);
    partial void OnThreePointAttemptsChanged();
    partial void OnTwoPointsChanging(System.Nullable<int> value);
    partial void OnTwoPointsChanged();
    partial void OnTwoPointAttemptsChanging(System.Nullable<int> value);
    partial void OnTwoPointAttemptsChanged();
    partial void OnFreeThrowsChanging(System.Nullable<int> value);
    partial void OnFreeThrowsChanged();
    partial void OnFreeThrowAttemptsChanging(System.Nullable<int> value);
    partial void OnFreeThrowAttemptsChanged();
    partial void OnOffensiveReboundsChanging(System.Nullable<int> value);
    partial void OnOffensiveReboundsChanged();
    partial void OnDefensiveReboundsChanging(System.Nullable<int> value);
    partial void OnDefensiveReboundsChanged();
    partial void OnAssistsChanging(System.Nullable<int> value);
    partial void OnAssistsChanged();
    partial void OnStealsChanging(System.Nullable<int> value);
    partial void OnStealsChanged();
    partial void OnBlocksChanging(System.Nullable<int> value);
    partial void OnBlocksChanged();
    partial void OnTurnoversChanging(System.Nullable<int> value);
    partial void OnTurnoversChanged();
    partial void OnPersonalFoulsChanging(System.Nullable<int> value);
    partial void OnPersonalFoulsChanged();
    partial void OnTotalPointsChanging(System.Nullable<int> value);
    partial void OnTotalPointsChanged();
    #endregion
		
		public NbaTeamSeasonStat()
		{
			this._NbaTeam = default(EntityRef<NbaTeam>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._NbaTeam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonYear", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SeasonYear
		{
			get
			{
				return this._SeasonYear;
			}
			set
			{
				if ((this._SeasonYear != value))
				{
					this.OnSeasonYearChanging(value);
					this.SendPropertyChanging();
					this._SeasonYear = value;
					this.SendPropertyChanged("SeasonYear");
					this.OnSeasonYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldGoals", DbType="Int")]
		public System.Nullable<int> FieldGoals
		{
			get
			{
				return this._FieldGoals;
			}
			set
			{
				if ((this._FieldGoals != value))
				{
					this.OnFieldGoalsChanging(value);
					this.SendPropertyChanging();
					this._FieldGoals = value;
					this.SendPropertyChanged("FieldGoals");
					this.OnFieldGoalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldGoalAttempts", DbType="Int")]
		public System.Nullable<int> FieldGoalAttempts
		{
			get
			{
				return this._FieldGoalAttempts;
			}
			set
			{
				if ((this._FieldGoalAttempts != value))
				{
					this.OnFieldGoalAttemptsChanging(value);
					this.SendPropertyChanging();
					this._FieldGoalAttempts = value;
					this.SendPropertyChanged("FieldGoalAttempts");
					this.OnFieldGoalAttemptsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreePoints", DbType="Int")]
		public System.Nullable<int> ThreePoints
		{
			get
			{
				return this._ThreePoints;
			}
			set
			{
				if ((this._ThreePoints != value))
				{
					this.OnThreePointsChanging(value);
					this.SendPropertyChanging();
					this._ThreePoints = value;
					this.SendPropertyChanged("ThreePoints");
					this.OnThreePointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreePointAttempts", DbType="Int")]
		public System.Nullable<int> ThreePointAttempts
		{
			get
			{
				return this._ThreePointAttempts;
			}
			set
			{
				if ((this._ThreePointAttempts != value))
				{
					this.OnThreePointAttemptsChanging(value);
					this.SendPropertyChanging();
					this._ThreePointAttempts = value;
					this.SendPropertyChanged("ThreePointAttempts");
					this.OnThreePointAttemptsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoPoints", DbType="Int")]
		public System.Nullable<int> TwoPoints
		{
			get
			{
				return this._TwoPoints;
			}
			set
			{
				if ((this._TwoPoints != value))
				{
					this.OnTwoPointsChanging(value);
					this.SendPropertyChanging();
					this._TwoPoints = value;
					this.SendPropertyChanged("TwoPoints");
					this.OnTwoPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoPointAttempts", DbType="Int")]
		public System.Nullable<int> TwoPointAttempts
		{
			get
			{
				return this._TwoPointAttempts;
			}
			set
			{
				if ((this._TwoPointAttempts != value))
				{
					this.OnTwoPointAttemptsChanging(value);
					this.SendPropertyChanging();
					this._TwoPointAttempts = value;
					this.SendPropertyChanged("TwoPointAttempts");
					this.OnTwoPointAttemptsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreeThrows", DbType="Int")]
		public System.Nullable<int> FreeThrows
		{
			get
			{
				return this._FreeThrows;
			}
			set
			{
				if ((this._FreeThrows != value))
				{
					this.OnFreeThrowsChanging(value);
					this.SendPropertyChanging();
					this._FreeThrows = value;
					this.SendPropertyChanged("FreeThrows");
					this.OnFreeThrowsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreeThrowAttempts", DbType="Int")]
		public System.Nullable<int> FreeThrowAttempts
		{
			get
			{
				return this._FreeThrowAttempts;
			}
			set
			{
				if ((this._FreeThrowAttempts != value))
				{
					this.OnFreeThrowAttemptsChanging(value);
					this.SendPropertyChanging();
					this._FreeThrowAttempts = value;
					this.SendPropertyChanged("FreeThrowAttempts");
					this.OnFreeThrowAttemptsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OffensiveRebounds", DbType="Int")]
		public System.Nullable<int> OffensiveRebounds
		{
			get
			{
				return this._OffensiveRebounds;
			}
			set
			{
				if ((this._OffensiveRebounds != value))
				{
					this.OnOffensiveReboundsChanging(value);
					this.SendPropertyChanging();
					this._OffensiveRebounds = value;
					this.SendPropertyChanged("OffensiveRebounds");
					this.OnOffensiveReboundsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefensiveRebounds", DbType="Int")]
		public System.Nullable<int> DefensiveRebounds
		{
			get
			{
				return this._DefensiveRebounds;
			}
			set
			{
				if ((this._DefensiveRebounds != value))
				{
					this.OnDefensiveReboundsChanging(value);
					this.SendPropertyChanging();
					this._DefensiveRebounds = value;
					this.SendPropertyChanged("DefensiveRebounds");
					this.OnDefensiveReboundsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assists", DbType="Int")]
		public System.Nullable<int> Assists
		{
			get
			{
				return this._Assists;
			}
			set
			{
				if ((this._Assists != value))
				{
					this.OnAssistsChanging(value);
					this.SendPropertyChanging();
					this._Assists = value;
					this.SendPropertyChanged("Assists");
					this.OnAssistsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Steals", DbType="Int")]
		public System.Nullable<int> Steals
		{
			get
			{
				return this._Steals;
			}
			set
			{
				if ((this._Steals != value))
				{
					this.OnStealsChanging(value);
					this.SendPropertyChanging();
					this._Steals = value;
					this.SendPropertyChanged("Steals");
					this.OnStealsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Blocks", DbType="Int")]
		public System.Nullable<int> Blocks
		{
			get
			{
				return this._Blocks;
			}
			set
			{
				if ((this._Blocks != value))
				{
					this.OnBlocksChanging(value);
					this.SendPropertyChanging();
					this._Blocks = value;
					this.SendPropertyChanged("Blocks");
					this.OnBlocksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Turnovers", DbType="Int")]
		public System.Nullable<int> Turnovers
		{
			get
			{
				return this._Turnovers;
			}
			set
			{
				if ((this._Turnovers != value))
				{
					this.OnTurnoversChanging(value);
					this.SendPropertyChanging();
					this._Turnovers = value;
					this.SendPropertyChanged("Turnovers");
					this.OnTurnoversChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalFouls", DbType="Int")]
		public System.Nullable<int> PersonalFouls
		{
			get
			{
				return this._PersonalFouls;
			}
			set
			{
				if ((this._PersonalFouls != value))
				{
					this.OnPersonalFoulsChanging(value);
					this.SendPropertyChanging();
					this._PersonalFouls = value;
					this.SendPropertyChanged("PersonalFouls");
					this.OnPersonalFoulsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPoints", DbType="Int")]
		public System.Nullable<int> TotalPoints
		{
			get
			{
				return this._TotalPoints;
			}
			set
			{
				if ((this._TotalPoints != value))
				{
					this.OnTotalPointsChanging(value);
					this.SendPropertyChanging();
					this._TotalPoints = value;
					this.SendPropertyChanged("TotalPoints");
					this.OnTotalPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NbaTeam_NbaTeamSeasonStat", Storage="_NbaTeam", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
		public NbaTeam NbaTeam
		{
			get
			{
				return this._NbaTeam.Entity;
			}
			set
			{
				NbaTeam previousValue = this._NbaTeam.Entity;
				if (((previousValue != value) 
							|| (this._NbaTeam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NbaTeam.Entity = null;
						previousValue.NbaTeamSeasonStats.Remove(this);
					}
					this._NbaTeam.Entity = value;
					if ((value != null))
					{
						value.NbaTeamSeasonStats.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(int);
					}
					this.SendPropertyChanged("NbaTeam");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NflPlayer")]
	public partial class NflPlayer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private System.Nullable<int> _TeamID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<bool> _IsActive;
		
		private EntityRef<NflPlayerCareerFumbleStat> _NflPlayerCareerFumbleStat;
		
		private EntityRef<NflPlayerCareerKickStat> _NflPlayerCareerKickStat;
		
		private EntityRef<NflPlayerCareerPassStat> _NflPlayerCareerPassStat;
		
		private EntityRef<NflPlayerCareerReceiveStat> _NflPlayerCareerReceiveStat;
		
		private EntityRef<NflPlayerCareerRushStat> _NflPlayerCareerRushStat;
		
		private EntityRef<NflPlayerCareerSackStat> _NflPlayerCareerSackStat;
		
		private EntityRef<NflTeam> _NflTeam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnTeamIDChanging(System.Nullable<int> value);
    partial void OnTeamIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public NflPlayer()
		{
			this._NflPlayerCareerFumbleStat = default(EntityRef<NflPlayerCareerFumbleStat>);
			this._NflPlayerCareerKickStat = default(EntityRef<NflPlayerCareerKickStat>);
			this._NflPlayerCareerPassStat = default(EntityRef<NflPlayerCareerPassStat>);
			this._NflPlayerCareerReceiveStat = default(EntityRef<NflPlayerCareerReceiveStat>);
			this._NflPlayerCareerRushStat = default(EntityRef<NflPlayerCareerRushStat>);
			this._NflPlayerCareerSackStat = default(EntityRef<NflPlayerCareerSackStat>);
			this._NflTeam = default(EntityRef<NflTeam>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int")]
		public System.Nullable<int> TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._NflTeam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NflPlayer_NflPlayerCareerFumbleStat", Storage="_NflPlayerCareerFumbleStat", ThisKey="PlayerID", OtherKey="PlayerID", IsUnique=true, IsForeignKey=false)]
		public NflPlayerCareerFumbleStat NflPlayerCareerFumbleStat
		{
			get
			{
				return this._NflPlayerCareerFumbleStat.Entity;
			}
			set
			{
				NflPlayerCareerFumbleStat previousValue = this._NflPlayerCareerFumbleStat.Entity;
				if (((previousValue != value) 
							|| (this._NflPlayerCareerFumbleStat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NflPlayerCareerFumbleStat.Entity = null;
						previousValue.NflPlayer = null;
					}
					this._NflPlayerCareerFumbleStat.Entity = value;
					if ((value != null))
					{
						value.NflPlayer = this;
					}
					this.SendPropertyChanged("NflPlayerCareerFumbleStat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NflPlayer_NflPlayerCareerKickStat", Storage="_NflPlayerCareerKickStat", ThisKey="PlayerID", OtherKey="PlayerID", IsUnique=true, IsForeignKey=false)]
		public NflPlayerCareerKickStat NflPlayerCareerKickStat
		{
			get
			{
				return this._NflPlayerCareerKickStat.Entity;
			}
			set
			{
				NflPlayerCareerKickStat previousValue = this._NflPlayerCareerKickStat.Entity;
				if (((previousValue != value) 
							|| (this._NflPlayerCareerKickStat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NflPlayerCareerKickStat.Entity = null;
						previousValue.NflPlayer = null;
					}
					this._NflPlayerCareerKickStat.Entity = value;
					if ((value != null))
					{
						value.NflPlayer = this;
					}
					this.SendPropertyChanged("NflPlayerCareerKickStat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NflPlayer_NflPlayerCareerPassStat", Storage="_NflPlayerCareerPassStat", ThisKey="PlayerID", OtherKey="PlayerID", IsUnique=true, IsForeignKey=false)]
		public NflPlayerCareerPassStat NflPlayerCareerPassStat
		{
			get
			{
				return this._NflPlayerCareerPassStat.Entity;
			}
			set
			{
				NflPlayerCareerPassStat previousValue = this._NflPlayerCareerPassStat.Entity;
				if (((previousValue != value) 
							|| (this._NflPlayerCareerPassStat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NflPlayerCareerPassStat.Entity = null;
						previousValue.NflPlayer = null;
					}
					this._NflPlayerCareerPassStat.Entity = value;
					if ((value != null))
					{
						value.NflPlayer = this;
					}
					this.SendPropertyChanged("NflPlayerCareerPassStat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NflPlayer_NflPlayerCareerReceiveStat", Storage="_NflPlayerCareerReceiveStat", ThisKey="PlayerID", OtherKey="PlayerID", IsUnique=true, IsForeignKey=false)]
		public NflPlayerCareerReceiveStat NflPlayerCareerReceiveStat
		{
			get
			{
				return this._NflPlayerCareerReceiveStat.Entity;
			}
			set
			{
				NflPlayerCareerReceiveStat previousValue = this._NflPlayerCareerReceiveStat.Entity;
				if (((previousValue != value) 
							|| (this._NflPlayerCareerReceiveStat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NflPlayerCareerReceiveStat.Entity = null;
						previousValue.NflPlayer = null;
					}
					this._NflPlayerCareerReceiveStat.Entity = value;
					if ((value != null))
					{
						value.NflPlayer = this;
					}
					this.SendPropertyChanged("NflPlayerCareerReceiveStat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NflPlayer_NflPlayerCareerRushStat", Storage="_NflPlayerCareerRushStat", ThisKey="PlayerID", OtherKey="PlayerID", IsUnique=true, IsForeignKey=false)]
		public NflPlayerCareerRushStat NflPlayerCareerRushStat
		{
			get
			{
				return this._NflPlayerCareerRushStat.Entity;
			}
			set
			{
				NflPlayerCareerRushStat previousValue = this._NflPlayerCareerRushStat.Entity;
				if (((previousValue != value) 
							|| (this._NflPlayerCareerRushStat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NflPlayerCareerRushStat.Entity = null;
						previousValue.NflPlayer = null;
					}
					this._NflPlayerCareerRushStat.Entity = value;
					if ((value != null))
					{
						value.NflPlayer = this;
					}
					this.SendPropertyChanged("NflPlayerCareerRushStat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NflPlayer_NflPlayerCareerSackStat", Storage="_NflPlayerCareerSackStat", ThisKey="PlayerID", OtherKey="PlayerID", IsUnique=true, IsForeignKey=false)]
		public NflPlayerCareerSackStat NflPlayerCareerSackStat
		{
			get
			{
				return this._NflPlayerCareerSackStat.Entity;
			}
			set
			{
				NflPlayerCareerSackStat previousValue = this._NflPlayerCareerSackStat.Entity;
				if (((previousValue != value) 
							|| (this._NflPlayerCareerSackStat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NflPlayerCareerSackStat.Entity = null;
						previousValue.NflPlayer = null;
					}
					this._NflPlayerCareerSackStat.Entity = value;
					if ((value != null))
					{
						value.NflPlayer = this;
					}
					this.SendPropertyChanged("NflPlayerCareerSackStat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NflTeam_NflPlayer", Storage="_NflTeam", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
		public NflTeam NflTeam
		{
			get
			{
				return this._NflTeam.Entity;
			}
			set
			{
				NflTeam previousValue = this._NflTeam.Entity;
				if (((previousValue != value) 
							|| (this._NflTeam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NflTeam.Entity = null;
						previousValue.NflPlayers.Remove(this);
					}
					this._NflTeam.Entity = value;
					if ((value != null))
					{
						value.NflPlayers.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(Nullable<int>);
					}
					this.SendPropertyChanged("NflTeam");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NflPlayerCareerFumbleStat")]
	public partial class NflPlayerCareerFumbleStat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private int _Fumbles;
		
		private EntityRef<NflPlayer> _NflPlayer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnFumblesChanging(int value);
    partial void OnFumblesChanged();
    #endregion
		
		public NflPlayerCareerFumbleStat()
		{
			this._NflPlayer = default(EntityRef<NflPlayer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._NflPlayer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fumbles", DbType="Int NOT NULL")]
		public int Fumbles
		{
			get
			{
				return this._Fumbles;
			}
			set
			{
				if ((this._Fumbles != value))
				{
					this.OnFumblesChanging(value);
					this.SendPropertyChanging();
					this._Fumbles = value;
					this.SendPropertyChanged("Fumbles");
					this.OnFumblesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NflPlayer_NflPlayerCareerFumbleStat", Storage="_NflPlayer", ThisKey="PlayerID", OtherKey="PlayerID", IsForeignKey=true)]
		public NflPlayer NflPlayer
		{
			get
			{
				return this._NflPlayer.Entity;
			}
			set
			{
				NflPlayer previousValue = this._NflPlayer.Entity;
				if (((previousValue != value) 
							|| (this._NflPlayer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NflPlayer.Entity = null;
						previousValue.NflPlayerCareerFumbleStat = null;
					}
					this._NflPlayer.Entity = value;
					if ((value != null))
					{
						value.NflPlayerCareerFumbleStat = this;
						this._PlayerID = value.PlayerID;
					}
					else
					{
						this._PlayerID = default(int);
					}
					this.SendPropertyChanged("NflPlayer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NflPlayerCareerKickStat")]
	public partial class NflPlayerCareerKickStat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private int _FieldGoalAttempts;
		
		private int _FieldGoals;
		
		private int _ExtraPointAttempts;
		
		private int _ExtraPoints;
		
		private EntityRef<NflPlayer> _NflPlayer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnFieldGoalAttemptsChanging(int value);
    partial void OnFieldGoalAttemptsChanged();
    partial void OnFieldGoalsChanging(int value);
    partial void OnFieldGoalsChanged();
    partial void OnExtraPointAttemptsChanging(int value);
    partial void OnExtraPointAttemptsChanged();
    partial void OnExtraPointsChanging(int value);
    partial void OnExtraPointsChanged();
    #endregion
		
		public NflPlayerCareerKickStat()
		{
			this._NflPlayer = default(EntityRef<NflPlayer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._NflPlayer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldGoalAttempts", DbType="Int NOT NULL")]
		public int FieldGoalAttempts
		{
			get
			{
				return this._FieldGoalAttempts;
			}
			set
			{
				if ((this._FieldGoalAttempts != value))
				{
					this.OnFieldGoalAttemptsChanging(value);
					this.SendPropertyChanging();
					this._FieldGoalAttempts = value;
					this.SendPropertyChanged("FieldGoalAttempts");
					this.OnFieldGoalAttemptsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldGoals", DbType="Int NOT NULL")]
		public int FieldGoals
		{
			get
			{
				return this._FieldGoals;
			}
			set
			{
				if ((this._FieldGoals != value))
				{
					this.OnFieldGoalsChanging(value);
					this.SendPropertyChanging();
					this._FieldGoals = value;
					this.SendPropertyChanged("FieldGoals");
					this.OnFieldGoalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtraPointAttempts", DbType="Int NOT NULL")]
		public int ExtraPointAttempts
		{
			get
			{
				return this._ExtraPointAttempts;
			}
			set
			{
				if ((this._ExtraPointAttempts != value))
				{
					this.OnExtraPointAttemptsChanging(value);
					this.SendPropertyChanging();
					this._ExtraPointAttempts = value;
					this.SendPropertyChanged("ExtraPointAttempts");
					this.OnExtraPointAttemptsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtraPoints", DbType="Int NOT NULL")]
		public int ExtraPoints
		{
			get
			{
				return this._ExtraPoints;
			}
			set
			{
				if ((this._ExtraPoints != value))
				{
					this.OnExtraPointsChanging(value);
					this.SendPropertyChanging();
					this._ExtraPoints = value;
					this.SendPropertyChanged("ExtraPoints");
					this.OnExtraPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NflPlayer_NflPlayerCareerKickStat", Storage="_NflPlayer", ThisKey="PlayerID", OtherKey="PlayerID", IsForeignKey=true)]
		public NflPlayer NflPlayer
		{
			get
			{
				return this._NflPlayer.Entity;
			}
			set
			{
				NflPlayer previousValue = this._NflPlayer.Entity;
				if (((previousValue != value) 
							|| (this._NflPlayer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NflPlayer.Entity = null;
						previousValue.NflPlayerCareerKickStat = null;
					}
					this._NflPlayer.Entity = value;
					if ((value != null))
					{
						value.NflPlayerCareerKickStat = this;
						this._PlayerID = value.PlayerID;
					}
					else
					{
						this._PlayerID = default(int);
					}
					this.SendPropertyChanged("NflPlayer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NflPlayerCareerPassStat")]
	public partial class NflPlayerCareerPassStat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private int _PassAttempts;
		
		private int _CompletePasses;
		
		private System.Nullable<int> _PassingYards;
		
		private int _TdPasses;
		
		private int _Interceptions;
		
		private System.Nullable<int> _LongestPass;
		
		private EntityRef<NflPlayer> _NflPlayer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnPassAttemptsChanging(int value);
    partial void OnPassAttemptsChanged();
    partial void OnCompletePassesChanging(int value);
    partial void OnCompletePassesChanged();
    partial void OnPassingYardsChanging(System.Nullable<int> value);
    partial void OnPassingYardsChanged();
    partial void OnTdPassesChanging(int value);
    partial void OnTdPassesChanged();
    partial void OnInterceptionsChanging(int value);
    partial void OnInterceptionsChanged();
    partial void OnLongestPassChanging(System.Nullable<int> value);
    partial void OnLongestPassChanged();
    #endregion
		
		public NflPlayerCareerPassStat()
		{
			this._NflPlayer = default(EntityRef<NflPlayer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._NflPlayer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassAttempts", DbType="Int NOT NULL")]
		public int PassAttempts
		{
			get
			{
				return this._PassAttempts;
			}
			set
			{
				if ((this._PassAttempts != value))
				{
					this.OnPassAttemptsChanging(value);
					this.SendPropertyChanging();
					this._PassAttempts = value;
					this.SendPropertyChanged("PassAttempts");
					this.OnPassAttemptsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletePasses", DbType="Int NOT NULL")]
		public int CompletePasses
		{
			get
			{
				return this._CompletePasses;
			}
			set
			{
				if ((this._CompletePasses != value))
				{
					this.OnCompletePassesChanging(value);
					this.SendPropertyChanging();
					this._CompletePasses = value;
					this.SendPropertyChanged("CompletePasses");
					this.OnCompletePassesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassingYards", DbType="Int")]
		public System.Nullable<int> PassingYards
		{
			get
			{
				return this._PassingYards;
			}
			set
			{
				if ((this._PassingYards != value))
				{
					this.OnPassingYardsChanging(value);
					this.SendPropertyChanging();
					this._PassingYards = value;
					this.SendPropertyChanged("PassingYards");
					this.OnPassingYardsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TdPasses", DbType="Int NOT NULL")]
		public int TdPasses
		{
			get
			{
				return this._TdPasses;
			}
			set
			{
				if ((this._TdPasses != value))
				{
					this.OnTdPassesChanging(value);
					this.SendPropertyChanging();
					this._TdPasses = value;
					this.SendPropertyChanged("TdPasses");
					this.OnTdPassesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Interceptions", DbType="Int NOT NULL")]
		public int Interceptions
		{
			get
			{
				return this._Interceptions;
			}
			set
			{
				if ((this._Interceptions != value))
				{
					this.OnInterceptionsChanging(value);
					this.SendPropertyChanging();
					this._Interceptions = value;
					this.SendPropertyChanged("Interceptions");
					this.OnInterceptionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongestPass", DbType="Int")]
		public System.Nullable<int> LongestPass
		{
			get
			{
				return this._LongestPass;
			}
			set
			{
				if ((this._LongestPass != value))
				{
					this.OnLongestPassChanging(value);
					this.SendPropertyChanging();
					this._LongestPass = value;
					this.SendPropertyChanged("LongestPass");
					this.OnLongestPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NflPlayer_NflPlayerCareerPassStat", Storage="_NflPlayer", ThisKey="PlayerID", OtherKey="PlayerID", IsForeignKey=true)]
		public NflPlayer NflPlayer
		{
			get
			{
				return this._NflPlayer.Entity;
			}
			set
			{
				NflPlayer previousValue = this._NflPlayer.Entity;
				if (((previousValue != value) 
							|| (this._NflPlayer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NflPlayer.Entity = null;
						previousValue.NflPlayerCareerPassStat = null;
					}
					this._NflPlayer.Entity = value;
					if ((value != null))
					{
						value.NflPlayerCareerPassStat = this;
						this._PlayerID = value.PlayerID;
					}
					else
					{
						this._PlayerID = default(int);
					}
					this.SendPropertyChanged("NflPlayer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NflPlayerCareerReceiveStat")]
	public partial class NflPlayerCareerReceiveStat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private System.Nullable<int> _Receptions;
		
		private System.Nullable<int> _ReceivingYards;
		
		private System.Nullable<int> _ReceivingTds;
		
		private EntityRef<NflPlayer> _NflPlayer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnReceptionsChanging(System.Nullable<int> value);
    partial void OnReceptionsChanged();
    partial void OnReceivingYardsChanging(System.Nullable<int> value);
    partial void OnReceivingYardsChanged();
    partial void OnReceivingTdsChanging(System.Nullable<int> value);
    partial void OnReceivingTdsChanged();
    #endregion
		
		public NflPlayerCareerReceiveStat()
		{
			this._NflPlayer = default(EntityRef<NflPlayer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._NflPlayer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Receptions", DbType="Int")]
		public System.Nullable<int> Receptions
		{
			get
			{
				return this._Receptions;
			}
			set
			{
				if ((this._Receptions != value))
				{
					this.OnReceptionsChanging(value);
					this.SendPropertyChanging();
					this._Receptions = value;
					this.SendPropertyChanged("Receptions");
					this.OnReceptionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceivingYards", DbType="Int")]
		public System.Nullable<int> ReceivingYards
		{
			get
			{
				return this._ReceivingYards;
			}
			set
			{
				if ((this._ReceivingYards != value))
				{
					this.OnReceivingYardsChanging(value);
					this.SendPropertyChanging();
					this._ReceivingYards = value;
					this.SendPropertyChanged("ReceivingYards");
					this.OnReceivingYardsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceivingTds", DbType="Int")]
		public System.Nullable<int> ReceivingTds
		{
			get
			{
				return this._ReceivingTds;
			}
			set
			{
				if ((this._ReceivingTds != value))
				{
					this.OnReceivingTdsChanging(value);
					this.SendPropertyChanging();
					this._ReceivingTds = value;
					this.SendPropertyChanged("ReceivingTds");
					this.OnReceivingTdsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NflPlayer_NflPlayerCareerReceiveStat", Storage="_NflPlayer", ThisKey="PlayerID", OtherKey="PlayerID", IsForeignKey=true)]
		public NflPlayer NflPlayer
		{
			get
			{
				return this._NflPlayer.Entity;
			}
			set
			{
				NflPlayer previousValue = this._NflPlayer.Entity;
				if (((previousValue != value) 
							|| (this._NflPlayer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NflPlayer.Entity = null;
						previousValue.NflPlayerCareerReceiveStat = null;
					}
					this._NflPlayer.Entity = value;
					if ((value != null))
					{
						value.NflPlayerCareerReceiveStat = this;
						this._PlayerID = value.PlayerID;
					}
					else
					{
						this._PlayerID = default(int);
					}
					this.SendPropertyChanged("NflPlayer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NflPlayerCareerRushStat")]
	public partial class NflPlayerCareerRushStat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private int _RushAttempts;
		
		private System.Nullable<int> _RushYards;
		
		private int _RushTds;
		
		private System.Nullable<int> _RushFirstdowns;
		
		private EntityRef<NflPlayer> _NflPlayer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnRushAttemptsChanging(int value);
    partial void OnRushAttemptsChanged();
    partial void OnRushYardsChanging(System.Nullable<int> value);
    partial void OnRushYardsChanged();
    partial void OnRushTdsChanging(int value);
    partial void OnRushTdsChanged();
    partial void OnRushFirstdownsChanging(System.Nullable<int> value);
    partial void OnRushFirstdownsChanged();
    #endregion
		
		public NflPlayerCareerRushStat()
		{
			this._NflPlayer = default(EntityRef<NflPlayer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._NflPlayer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RushAttempts", DbType="Int NOT NULL")]
		public int RushAttempts
		{
			get
			{
				return this._RushAttempts;
			}
			set
			{
				if ((this._RushAttempts != value))
				{
					this.OnRushAttemptsChanging(value);
					this.SendPropertyChanging();
					this._RushAttempts = value;
					this.SendPropertyChanged("RushAttempts");
					this.OnRushAttemptsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RushYards", DbType="Int")]
		public System.Nullable<int> RushYards
		{
			get
			{
				return this._RushYards;
			}
			set
			{
				if ((this._RushYards != value))
				{
					this.OnRushYardsChanging(value);
					this.SendPropertyChanging();
					this._RushYards = value;
					this.SendPropertyChanged("RushYards");
					this.OnRushYardsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RushTds", DbType="Int NOT NULL")]
		public int RushTds
		{
			get
			{
				return this._RushTds;
			}
			set
			{
				if ((this._RushTds != value))
				{
					this.OnRushTdsChanging(value);
					this.SendPropertyChanging();
					this._RushTds = value;
					this.SendPropertyChanged("RushTds");
					this.OnRushTdsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RushFirstdowns", DbType="Int")]
		public System.Nullable<int> RushFirstdowns
		{
			get
			{
				return this._RushFirstdowns;
			}
			set
			{
				if ((this._RushFirstdowns != value))
				{
					this.OnRushFirstdownsChanging(value);
					this.SendPropertyChanging();
					this._RushFirstdowns = value;
					this.SendPropertyChanged("RushFirstdowns");
					this.OnRushFirstdownsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NflPlayer_NflPlayerCareerRushStat", Storage="_NflPlayer", ThisKey="PlayerID", OtherKey="PlayerID", IsForeignKey=true)]
		public NflPlayer NflPlayer
		{
			get
			{
				return this._NflPlayer.Entity;
			}
			set
			{
				NflPlayer previousValue = this._NflPlayer.Entity;
				if (((previousValue != value) 
							|| (this._NflPlayer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NflPlayer.Entity = null;
						previousValue.NflPlayerCareerRushStat = null;
					}
					this._NflPlayer.Entity = value;
					if ((value != null))
					{
						value.NflPlayerCareerRushStat = this;
						this._PlayerID = value.PlayerID;
					}
					else
					{
						this._PlayerID = default(int);
					}
					this.SendPropertyChanged("NflPlayer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NflPlayerCareerSackStat")]
	public partial class NflPlayerCareerSackStat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerID;
		
		private int _Sacks;
		
		private System.Nullable<int> _YardsLostToSacks;
		
		private EntityRef<NflPlayer> _NflPlayer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnSacksChanging(int value);
    partial void OnSacksChanged();
    partial void OnYardsLostToSacksChanging(System.Nullable<int> value);
    partial void OnYardsLostToSacksChanged();
    #endregion
		
		public NflPlayerCareerSackStat()
		{
			this._NflPlayer = default(EntityRef<NflPlayer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PlayerID
		{
			get
			{
				return this._PlayerID;
			}
			set
			{
				if ((this._PlayerID != value))
				{
					if (this._NflPlayer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIDChanging(value);
					this.SendPropertyChanging();
					this._PlayerID = value;
					this.SendPropertyChanged("PlayerID");
					this.OnPlayerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sacks", DbType="Int NOT NULL")]
		public int Sacks
		{
			get
			{
				return this._Sacks;
			}
			set
			{
				if ((this._Sacks != value))
				{
					this.OnSacksChanging(value);
					this.SendPropertyChanging();
					this._Sacks = value;
					this.SendPropertyChanged("Sacks");
					this.OnSacksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YardsLostToSacks", DbType="Int")]
		public System.Nullable<int> YardsLostToSacks
		{
			get
			{
				return this._YardsLostToSacks;
			}
			set
			{
				if ((this._YardsLostToSacks != value))
				{
					this.OnYardsLostToSacksChanging(value);
					this.SendPropertyChanging();
					this._YardsLostToSacks = value;
					this.SendPropertyChanged("YardsLostToSacks");
					this.OnYardsLostToSacksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NflPlayer_NflPlayerCareerSackStat", Storage="_NflPlayer", ThisKey="PlayerID", OtherKey="PlayerID", IsForeignKey=true)]
		public NflPlayer NflPlayer
		{
			get
			{
				return this._NflPlayer.Entity;
			}
			set
			{
				NflPlayer previousValue = this._NflPlayer.Entity;
				if (((previousValue != value) 
							|| (this._NflPlayer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NflPlayer.Entity = null;
						previousValue.NflPlayerCareerSackStat = null;
					}
					this._NflPlayer.Entity = value;
					if ((value != null))
					{
						value.NflPlayerCareerSackStat = this;
						this._PlayerID = value.PlayerID;
					}
					else
					{
						this._PlayerID = default(int);
					}
					this.SendPropertyChanged("NflPlayer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NflTeam")]
	public partial class NflTeam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamID;
		
		private string _TeamName;
		
		private EntitySet<NflTeamSeasonStat> _NflTeamSeasonStats;
		
		private EntitySet<NflPlayer> _NflPlayers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnTeamNameChanging(string value);
    partial void OnTeamNameChanged();
    #endregion
		
		public NflTeam()
		{
			this._NflTeamSeasonStats = new EntitySet<NflTeamSeasonStat>(new Action<NflTeamSeasonStat>(this.attach_NflTeamSeasonStats), new Action<NflTeamSeasonStat>(this.detach_NflTeamSeasonStats));
			this._NflPlayers = new EntitySet<NflPlayer>(new Action<NflPlayer>(this.attach_NflPlayers), new Action<NflPlayer>(this.detach_NflPlayers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TeamName
		{
			get
			{
				return this._TeamName;
			}
			set
			{
				if ((this._TeamName != value))
				{
					this.OnTeamNameChanging(value);
					this.SendPropertyChanging();
					this._TeamName = value;
					this.SendPropertyChanged("TeamName");
					this.OnTeamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NflTeam_NflTeamSeasonStat", Storage="_NflTeamSeasonStats", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<NflTeamSeasonStat> NflTeamSeasonStats
		{
			get
			{
				return this._NflTeamSeasonStats;
			}
			set
			{
				this._NflTeamSeasonStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NflTeam_NflPlayer", Storage="_NflPlayers", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<NflPlayer> NflPlayers
		{
			get
			{
				return this._NflPlayers;
			}
			set
			{
				this._NflPlayers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NflTeamSeasonStats(NflTeamSeasonStat entity)
		{
			this.SendPropertyChanging();
			entity.NflTeam = this;
		}
		
		private void detach_NflTeamSeasonStats(NflTeamSeasonStat entity)
		{
			this.SendPropertyChanging();
			entity.NflTeam = null;
		}
		
		private void attach_NflPlayers(NflPlayer entity)
		{
			this.SendPropertyChanging();
			entity.NflTeam = this;
		}
		
		private void detach_NflPlayers(NflPlayer entity)
		{
			this.SendPropertyChanging();
			entity.NflTeam = null;
		}
	}
}
#pragma warning restore 1591
